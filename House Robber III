/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     int rob(TreeNode* root) {
       vector<int>result = heist(root);
       return max(result[0],result[1]); 
    }

    private:
         vector<int> heist(TreeNode* root){
            if(root == nullptr){
                return {0,0};
            }

            vector<int> leftsubtree = heist(root->left);
            vector<int> rightsubtree = heist(root->right);

            int includeRoot = root->val + leftsubtree[1]+rightsubtree[1];

            int excludeRoot = max(leftsubtree[0],leftsubtree[1])+
                              max(rightsubtree[0],rightsubtree[1]);

            return {includeRoot,excludeRoot};                  
         }  
};
